service: orders

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs22.x
  stage: dev
  profile: developer
  region: us-east-2

functions:
  createOrder:
    handler: dist/apps/orders/src/main.handler
    name: create-new-${self:service}-${self:provider.stage}
    events:
      - httpApi:
          path: /orders
          method: POST
  getOrderById:
    handler: dist/apps/order/src/main.handler
    name: get-order-by-id-${self:service}-${self:provider.stage}
    events:
      - httpApi:
          path: /orders/{orderId}
          method: GET
  prepareOrder:
    handler: dist/apps/queue/src/main.handler
    name: prepare-order-${self:service}-${self:provider.stage}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PendingOrdersQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    PendingOrdersQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: pending-${self:service}-queue
# build:
#   esBuild:
#     bundle: true
#     sourcemap: true
#     minify: true
#     target: nodejs22.x

package:
  individually: true
  # patterns:
  #   - '!node_modules/**'
  #   - '!dist/**'
  #   - '!coverage/**'
  #   - '!cypress/**'
  #   - '!apps/**'
  #   - '!serverless.yml'
  #   - '!.serverless/**'
  #   - '!.git/**'
  #   - '!.eslintrc.js'
  #   - '!.prettierrc'
  #   - '!.gitignore'
  #   - '!nest-cli.json'
  #   - '!package.json'
  #   - '!package-lock.json'
  #   - '!README.md'
  #   - '!tsconfig.build.json'
  #   - '!tsconfig.json'
  #   - '!yarn.lock'
  #   - '!esbuild.config.js'
  #   - '!apps/**'
